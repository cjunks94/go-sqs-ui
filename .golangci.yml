# golangci-lint configuration
# Documentation: https://golangci-lint.run/usage/configuration/

run:
  timeout: 5m
  issues-exit-code: 1
  tests: true
  skip-dirs:
    - vendor
    - node_modules
    - .git
  skip-files:
    - ".*_test.go"
    - "test_.*\\.go"

output:
  format: colored-line-number
  print-issued-lines: true
  print-linter-name: true

linters:
  enable:
    # Default linters
    - errcheck      # Checking for unchecked errors
    - gosimple      # Simplify code
    - govet         # Go vet examines Go source code
    - ineffassign   # Detects ineffectual assignments
    - staticcheck   # Staticcheck
    - unused        # Checks for unused code
    
    # Additional linters for code quality
    - bodyclose     # Checks HTTP response body is closed
    - dogsled       # Checks assignments with too many blank identifiers
    - dupl          # Code clone detection
    - exportloopref # Checks for pointers to enclosing loop variables
    - gocognit      # Computes cognitive complexity
    - goconst       # Finds repeated strings
    - gocritic      # Provides many useful checks
    - gocyclo       # Computes cyclomatic complexity
    - gofmt         # Checks code formatting
    - goimports     # Checks imports formatting
    - goprintffuncname # Checks printf-like function names
    - gosec         # Security checks
    - misspell      # Finds misspelled words
    - nakedret      # Finds naked returns
    - noctx         # HTTP requests should have context
    - nolintlint    # Reports ill-formed or insufficient nolint directives
    - prealloc      # Finds slice declarations that could be preallocated
    - revive        # Fast, configurable linter
    - stylecheck    # Stylecheck
    - thelper       # Detects test helpers without t.Helper()
    - unconvert     # Removes unnecessary type conversions
    - unparam       # Reports unused function parameters
    - whitespace    # Detects leading and trailing whitespace

  disable:
    - depguard      # We don't need to restrict imports
    - exhaustive    # Too strict for switch statements
    - gochecknoglobals # We use some globals for configuration
    - godox         # We allow TODO/FIXME comments
    - goerr113      # Too strict error handling
    - gomnd         # Magic numbers are sometimes OK
    - lll           # Line length is handled by editor
    - nlreturn      # Too strict about newlines
    - testpackage   # Tests in same package are fine
    - wsl           # Too strict about whitespace

linters-settings:
  errcheck:
    check-type-assertions: true
    check-blank: true
    exclude-functions:
      - (*net/http.ResponseWriter).Write
      - (net/http.ResponseWriter).Write

  govet:
    enable-all: true
    disable:
      - fieldalignment # Too noisy

  gocyclo:
    min-complexity: 15

  gocognit:
    min-complexity: 20

  dupl:
    threshold: 100

  goconst:
    min-len: 3
    min-occurrences: 3

  misspell:
    locale: US

  lll:
    line-length: 120

  gosec:
    excludes:
      - G104 # Unhandled errors - covered by errcheck
      - G304 # File path provided by user - we need this for file operations
    severity: medium
    confidence: medium

  gocritic:
    enabled-tags:
      - diagnostic
      - experimental
      - opinionated
      - performance
      - style
    disabled-checks:
      - dupImport # https://github.com/go-critic/go-critic/issues/845
      - ifElseChain
      - octalLiteral
      - whyNoLint
      - wrapperFunc
      - hugeParam # Too restrictive
      - rangeValCopy # Performance is not critical for our use case

  revive:
    severity: warning
    rules:
      - name: blank-imports
      - name: context-as-argument
      - name: context-keys-type
      - name: dot-imports
      - name: error-return
      - name: error-strings
      - name: error-naming
      - name: exported
      - name: if-return
      - name: increment-decrement
      - name: var-naming
      - name: var-declaration
      - name: package-comments
        severity: warning
      - name: range
      - name: receiver-naming
      - name: time-naming
      - name: unexported-return
      - name: indent-error-flow
      - name: errorf
      - name: empty-block
      - name: superfluous-else
      - name: unreachable-code
      - name: redefines-builtin-id

  staticcheck:
    checks: ["all", "-ST1000", "-ST1003", "-ST1016", "-ST1020", "-ST1021", "-ST1022"]

  stylecheck:
    checks: ["all", "-ST1000", "-ST1003", "-ST1016", "-ST1020", "-ST1021", "-ST1022"]
    initialisms: ["ACL", "API", "ASCII", "CPU", "CSS", "DNS", "EOF", "GUID", "HTML", "HTTP", "HTTPS", "ID", "IP", "JSON", "QPS", "RAM", "RPC", "SLA", "SMTP", "SQL", "SSH", "TCP", "TLS", "TTL", "UDP", "UI", "GID", "UID", "UUID", "URI", "URL", "UTF8", "VM", "XML", "XMPP", "XSRF", "XSS", "SQS", "DLQ", "AWS"]

  unparam:
    check-exported: false

  goimports:
    local-prefixes: github.com/cjunker/go-sqs-ui

issues:
  exclude-rules:
    # Exclude some linters from running on tests files
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - dupl
        - gosec
        - gocognit
        - goconst

    # Exclude known issues in vendored code
    - path: vendor/
      linters:
        - all

    # Exclude some specific issues
    - text: "weak cryptographic primitive"
      linters:
        - gosec

    # Ignore error checks for fmt.Println and similar
    - text: "Error return value of .((os\\.)?std(out|err)\\..*|.*Close|.*Flush|os\\.Remove(All)?|.*print(f|ln)?|os\\.(Un)?Setenv). is not checked"
      linters:
        - errcheck

    # Allow certain patterns
    - text: "should have a package comment"
      linters:
        - revive
        - stylecheck

    - text: "don't use an underscore in package name"
      linters:
        - revive
        - stylecheck

  max-issues-per-linter: 50
  max-same-issues: 10
  new: false
  fix: false

severity:
  default-severity: warning
  case-sensitive: false